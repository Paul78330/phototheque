# Utilise l'image Docker 'docker/compose:latest' pour exécuter les jobs de ce pipeline
image: docker/compose:latest

# Utilise le service 'docker:dind' (Docker in Docker) pour permettre l'exécution de Docker à l'intérieur des jobs
services:
  - docker:dind

# Définit les étapes du pipeline
stages:
  - build
  - test_unitaire
  - test_integration
  - test_QA
  - test_e2e
  - deploy_staging
  - test_iso_prod
  - deploy_production
  - debug

# Définit des variables d'environnement pour Docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_CERT_PATH: ""
  DOCKER_TLS_VERIFY: ""

# Exécute 'docker info' avant chaque job pour afficher des informations sur l'environnement Docker
before_script:
  - docker info

# Job 'build' pour construire les images Docker de l'application
build:
  stage: build
  script:
    - docker-compose build
  # Conserve l'ensemble du répertoire de travail comme artefact pour les jobs suivants
  artifacts:
    paths:
      - ./


# Job 'tests_unitaires' pour exécuter les tests unitaires de l'application
tests_unitaires:
  stage: test_unitaire
  script:
    - docker-compose up test
  artifacts:
    reports:
      junit: test-results/resultat_tests.xml
    paths:
      - test-results/resultat_tests.xml
    when: always

# Job 'tests_integration' pour exécuter les tests d'intégration de l'application
tests_integration:
  stage: test_integration
  script:
    - docker-compose up -d app
    - docker-compose run -T app npm run test:integration
  artifacts:
    reports:
      junit: integration-test-results/resultat_tests_integration.xml
    paths:
      - integration-test-results/resultat_tests_integration.xml
    when: always

# Job 'test_QA' pour exécuter les tests de qualité de l'application avec ESLint
test_QA:
  stage: test_QA
  script:
    - docker-compose run -T eslint
  artifacts:
    paths:
      - eslint-report.xml
    reports:
      junit: eslint-report.xml
    when: always
# Job 'tests_e2e' pour exécuter les tests end-to-end (e2e) avec Cypress
tests_e2e:
  stage: test_e2e
  script:
    - docker-compose up -d app
    - docker-compose up cypress
    # - docker-compose down
  artifacts:
    paths:
      - cypress/videos/*
      - cypress/screenshots/*
      - download/*
    when: always

# Job 'deploy_staging' pour déployer l'application dans l'environnement de staging
deploy_staging:
  stage: deploy_staging
  script:
    - echo "Removing existing containers..."
    - docker-compose -p phototeque down || true
    - echo "Deploying to staging environment..."
    - docker-compose -p phototeque -f docker-compose.staging.yml up --build
  environment:
    name: staging

# Job 'test_iso_prod' pour exécuter des tests en iso-prod dans l'environnement de staging
test_iso_prod:
  stage: test_iso_prod
  script:
    - echo "Running iso-prod tests..."
    - docker-compose -f docker-compose.staging.yml run -T app npm run test:iso-prod
  dependencies:
    - deploy_staging

# Job 'deploy_production' pour déployer l'application dans l'environnement de production
deploy_production:
  stage: deploy_production
  script:
    - echo "Deploying to production environment..."
    - docker-compose -f docker-compose.production.yml up -d
  environment:
    name: production
  when: manual

#Enfin, le job deploy_production est toujours déclenché manuellement. Cela signifie que vous devez aller dans GitLab et cliquer sur un bouton pour déclencher ce job. C'est une bonne pratique pour les déploiements en production, car cela vous donne un dernier point de contrôle avant de déployer.